#include "virtual_shadow_map_shared.h"
#include "math/color.hlsl"
#include "math/transform.hlsl"

ConstantBuffer<VSMConstants> g_Constants;
Texture2D<float> g_DepthCopy;
RWTexture2D<uint> g_VirtualPageTableUav;
// TODO remove
RWTexture2D<float4> g_TargetTexture;

[numthreads(TILE_SIZE, TILE_SIZE, 1)]
void main(uint2 gtid : SV_GroupThreadID, uint2 gid : SV_GroupID, uint2 did : SV_DispatchThreadID)
{
    uint2 pixelCoordinates = did;
    if (any(pixelCoordinates >= g_Constants.screenSize.xy))
    {
        return;
    }

    float3 worldPosition = reconstructWorldPosition((float2(pixelCoordinates) + 0.5f) * g_Constants.screenSize.zw,
                                                    g_DepthCopy.Load(int3(pixelCoordinates, 0)),
                                                    g_Constants.invViewProjection);

    float distanceToCamera = length(worldPosition - g_Constants.cameraPosition);
    if (distanceToCamera > CASCADE_SIZE_0)
    {
        return;
    }

    float3 virtualTextureUv = calculateVirtualTextureUv(worldPosition, g_Constants.lightViewProjection);

    const uint2 pageCoordinates = virtualTextureUv.xy * PAGE_TABLE_RESOLUTION;
    uint orig;
    InterlockedOr(g_VirtualPageTableUav[pageCoordinates], 1, orig);

    // TODO remove debug
    g_TargetTexture[pixelCoordinates] = float4(frac(virtualTextureUv * PAGE_TABLE_RESOLUTION).xy, 0, 1);
}
