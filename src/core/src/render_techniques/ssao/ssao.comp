#include "ssao_shared.h"
#include "math/color.hlsl"

ConstantBuffer<SSAOConstants> g_Constants;
Texture2D<float> g_Depth;
// Normal, roughness
Texture2D<float4> g_GBuffer1;
RWTexture2D<float> g_AO;
SamplerState g_NearestSampler;

#define NUM_TAPS 64
#define NUM_TANGENTS 16
#define NUM_TANGENTS_SIDE 4

float3 getTap(uint index)
{
    // https://colab.research.google.com/drive/1DInbx8id8yAXFVb2UB5thppFxZE_XI7V#scrollTo=oc2EDqquhv70
    float3 TAPS[NUM_TAPS] = {
        float3(0.2879492110269814f, -0.5154844222894919f, 0.17179474104842768f),
        float3(-0.24952216023065305f, 0.07443199347337935f, 0.09934042793632533f),
        float3(0.43198839873482126f, -0.8126853256623418f, 0.3014849400627313f),
        float3(-0.0033539935678521897f, -0.006620058564592238f, 0.006702652590443216f),
        float3(-0.12335007539679017f, 0.1484953430330839f, 0.28632167802627567f),
        float3(-0.09897276471633297f, -0.043066815191822407f, 0.040924272522030854f),
        float3(0.31112669950752997f, 0.03408719011983871f, 0.36740867103408315f),
        float3(0.7642022330678729f, -0.0013875877765526328f, 0.19440929886809968f),
        float3(0.46530992827660334f, 0.020327460011868533f, 0.8458703801117515f),
        float3(-0.030319262314651332f, 0.08930736168127437f, 0.16236301081250643f),
        float3(0.012513559167583805f, -0.0920862136432976f, 0.024822857021606796f),
        float3(-0.056181364730123196f, 0.1559688291831243f, 0.02270684332021741f),
        float3(0.012948532204513573f, -0.002938340610515351f, 0.012789773676654502f),
        float3(0.002723511352803073f, 0.009297786285062191f, 0.0024766219147181567f),
        float3(-0.06326683611687216f, 0.04344466067385366f, 0.07806136396569383f),
        float3(0.2110695071658433f, -0.043346809358473154f, 0.15298704832425467f),
        float3(-0.007138950228584096f, 0.004589192372046807f, 0.005289111740750664f),
        float3(0.19241195403772438f, -0.6467226788754413f, 0.47659374271524035f),
        float3(0.1842807028037712f, 0.4353228389770327f, 0.0407530148296168f),
        float3(-0.24655965249310294f, 0.0927666124632332f, 0.4791226838612965f),
        float3(-0.06606652846776186f, 0.09716875895930367f, 0.19270070406090953f),
        float3(0.017237799633106933f, 0.026939150775452704f, 0.013766923228079726f),
        float3(-0.40260193035692776f, 0.8193588495709407f, 0.26363267503334237f),
        float3(-0.020950524067030747f, -0.005994639346235027f, 0.0414910593063013f),
        float3(0.8053928569325317f, 0.3513338967018762f, 0.05863605580901478f),
        float3(0.10385533476997327f, 0.08467192543410705f, 0.05318468245977477f),
        float3(-0.16157551362869935f, 0.1280282361901706f, 0.0970500297282057f),
        float3(0.12028352360002605f, 0.1310973618837638f, 0.025268696064996075f),
        float3(-0.004890455423553682f, -1.7817986181881517e-05f, 0.008722564317309608f),
        float3(0.0055220168668958635f, 0.0070134391133767895f, 0.0045076603160258445f),
        float3(0.039996327951972f, -0.018982263040168413f, 0.0341740655059714f),
        float3(0.021275420468270672f, 0.040137027822049164f, 0.04499346301635109f),
        float3(-0.1857928564653972f, -0.2222174156245385f, 0.1675926459276383f),
        float3(0.005070444663959152f, -0.003961256356313101f, 0.007655000913735887f),
        float3(0.5650541162779289f, -0.44148274540326493f, 0.19662949984619396f),
        float3(-0.32497338852643126f, -0.5716898510046745f, 0.6663843367521175f),
        float3(0.09935396253596836f, -0.13806151021567895f, 0.016998680424206485f),
        float3(-0.018482140757927472f, 0.014168680827816263f, 0.01591141649538954f),
        float3(-0.006822238947419686f, -0.011935254306719937f, 0.009831699924893102f),
        float3(0.4483030973548552f, -0.5630613307500975f, 0.39943702516490875f),
        float3(-0.15353818287933646f, 0.4591518494770301f, 0.1914960030320545f),
        float3(-0.0056503816043017565f, 0.005762848458848871f, 0.06667789920360798f),
        float3(-0.2822596826811535f, 0.16681564309929878f, 0.4003929466693061f),
        float3(0.005671654904335995f, -0.013107706862946603f, 0.015518138311145974f),
        float3(-0.015788417782089854f, -0.006611393564913687f, 0.0538564782287426f),
        float3(-0.03330327630447214f, 0.06628185802767052f, 0.14969060639073128f),
        float3(0.14451959449544702f, 0.005645511550537103f, 0.06951751626444126f),
        float3(-0.007450921606930287f, -0.03762248895253466f, 0.4360148483547498f),
        float3(-0.06843616029101751f, -0.0337368117016844f, 0.05176870349685961f),
        float3(0.21169845987215685f, -0.02441435599632692f, 0.20484422328968324f),
        float3(0.07823473064083868f, -0.05359838715127422f, 0.02495142009384654f),
        float3(-0.2182015909894272f, 0.19778304436651523f, 0.04862683797657417f),
        float3(-0.12820474927904862f, 0.20988239977204579f, 0.30102412193610967f),
        float3(0.02297572039504204f, -0.02310166996568014f, 0.021764920622113094f),
        float3(-0.1311596981347165f, -0.2850005041823498f, 0.154903838583738f),
        float3(-0.04174622832079985f, 0.06702100387453751f, 0.004888313608623837f),
        float3(0.2895100413312157f, 0.02289904192232495f, 0.28914473375471783f),
        float3(0.2407507462320882f, -0.31162618421486615f, 0.3273483153625707f),
        float3(-0.053844892302776635f, 0.0635366473056577f, 0.06496159199991518f),
        float3(0.31122814056606574f, -0.36703879642629f, 0.3488465124861474f),
        float3(0.575121980746001f, -0.2819481377092508f, 0.34281261353622355f),
        float3(-0.007324386280508732f, 0.027805475208627167f, 0.04925009700129444f),
        float3(0.013095841790272775f, -0.019693829027016323f, 0.016862364153896987f),
        float3(-0.2396846059968758f, -0.4026390035012443f, 0.13940072079722557f),
    };

    return TAPS[index];
}

float3 getTangent(uint2 texelCoordinates)
{
    float3 TANGENTS[NUM_TANGENTS] = {
        float3(0.6848813937336977f, -0.09038904356140687f, 0.7230264845228297f),
        float3(-0.3679108967498836f, -0.5649743136782859f, -0.7385428876757574f),
        float3(-0.16698915175883441f, 0.6624400390265878f, 0.7302655803810816f),
        float3(0.5914072004844955f, 0.4550665392284702f, 0.665696603633904f),
        float3(-0.3009558478958742f, -0.10279603667739068f, -0.94808151150663f),
        float3(-0.8610353582410939f, -0.32781820506705617f, -0.38878443421161374f),
        float3(0.5308834877285229f, 0.5816254135921793f, 0.6163396796579996f),
        float3(-0.279963220568938f, -0.7207692377283869f, 0.6341232538498396f),
        float3(-0.21556456214891703f, 0.03295066779927127f, 0.9759334880191005f),
        float3(0.4551035654687424f, -0.056670660802762604f, 0.8886333219623358f),
        float3(0.7464582539595253f, -0.6549470585471019f, -0.11766233720352515f),
        float3(0.02138457541310494f, 0.9556600619297624f, 0.2936946474943053f),
        float3(0.8005061560875252f, 0.5066537076149847f, -0.32014358438982377f),
        float3(0.5874694762360387f, 0.8092335717975571f, -0.004543211058508476f),
        float3(0.001298044420067328f, 0.7758627822668795f, -0.6309003551859677f),
        float3(-0.6653867271209573f, -0.2328911043477962f, 0.709240605779819f),
    };

    uint2 tileCoordinates = texelCoordinates % NUM_TANGENTS_SIDE;
    uint index = NUM_TANGENTS_SIDE * tileCoordinates.y + tileCoordinates.x;
    return TANGENTS[index];
}

[numthreads(TILE_SIZE, TILE_SIZE, 1)]
void main(uint2 gtid : SV_GroupThreadID, uint2 gid : SV_GroupID, uint2 did : SV_DispatchThreadID)
{
    uint2 currentTexelCoordinates = did;
    if (any(currentTexelCoordinates > g_Constants.screenSize.xy))
    {
        return;
    }

    float2 texelUv = g_Constants.screenSize.zw * did;
    float2 ndc = 2.0f * float2(texelUv.x, 1.0f - texelUv.y) - 1.0f;
    float depth = g_Depth.Load(int3(did, 0));

    float4 wsPosition = mul(g_Constants.invViewProjection, float4(ndc, depth, 1.0f));
    wsPosition.xyz /= wsPosition.w;

    float3 wsNormal = g_GBuffer1.Load(int3(did, 0)).xyz;
    float3 wsTangent = getTangent(did);
    wsTangent = wsTangent - dot(wsTangent, wsNormal) * wsNormal;
    float3 wsBitangent = cross(wsNormal, wsTangent);
    float3x3 TBN = float3x3(
        wsTangent.x, wsBitangent.x, wsNormal.x,
        wsTangent.y, wsBitangent.y, wsNormal.y,
        wsTangent.z, wsBitangent.z, wsNormal.z
    );

    // TODO move to params
    const float RADIUS = 3.0f;
    float occluded = 0.0f;
    for (uint tapIndex = 0; tapIndex < NUM_TAPS; ++tapIndex)
    {
        float3 tsTap = getTap(tapIndex);
        // Reconstruct world pos
        // Translate tap to ws with TBN and add world pos
        // use viewProj matrix to get ndc
        // calculate uv for sampling depth
        // compare depth in current pixel with sampled depth
        float3 wsTap = RADIUS * mul(TBN, tsTap) + wsPosition.xyz;
        float4 ndcTap = mul(g_Constants.viewProjection, float4(wsTap, 1.0f));
        ndcTap.xyz /= ndcTap.w;

        float2 uvTap = 0.5f * float2(1.0f + ndcTap.x, 1.0f - ndcTap.y);
        float tapDepth = g_Depth.SampleLevel(g_NearestSampler, uvTap, 0.0f);
        
        // TODO add a small bias
        // TODO add radius check
        occluded += tapDepth >= ndcTap.z ? 1.0f : 0.0f;
    }
    float aoFactor = 1.0f - occluded / NUM_TAPS;

    g_AO[currentTexelCoordinates] = aoFactor;
}
